// 39. Combination Sum : https://leetcode.com/problems/combination-sum/

class Solution {
public:
    void sum(int index, int target, vector<int>& arr, vector<int>& ds, vector<vector<int>>& res) {
        if(index == arr.size()){
            if(target == 0) res.push_back(ds);
            return;
        }

        if(target >= arr[index]){
            // add and still stay at the same index (duplicates allowed)
            ds.push_back(arr[index]);
            sum(index, target-arr[index], arr, ds, res);
            // remove for backtracking
            ds.pop_back();
        }
        // goto next without picking up the index ele
        sum(index+1, target, arr, ds, res);
    }

    vector<vector<int>> combinationSum(vector<int>& arr, int target) {
        vector<vector<int>> res;
        vector<int> ds;

        sum(0, target, arr, ds, res);
        return res;
    }
};

auto init = atexit([]() { ofstream("display_runtime.txt") << "0";}); 

// arr = [2,3,4,5,6,7,8,9] target =   7
// Output [[2,2,3],[2,5],[3,4],[7]]

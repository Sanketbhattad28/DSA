46. Permutations -> https://leetcode.com/problems/permutations/

// nums-> [1,2,3]
// o/p -> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,2,1],[3,1,2]]
------------------------------------------------
brute force (using extra space)
class Solution {
public:
    void set(int ind, vector<int>& arr, vector<int>& ds, vector<int>& mp, vector<vector<int>>& res){
        if(ds.size() == arr.size()){
            res.push_back(ds);
            return;
        }
        for(int i=0; i<arr.size(); i++){
            if(mp[i]) continue;
            mp[i] = 1;
            ds.push_back(arr[i]);
            set(i+1, arr, ds, mp, res);
            mp[i] = 0;
            ds.pop_back();
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> ds;
        vector<int> mp(nums.size(), 0);

        set(0, nums,  ds, mp, res);
        return res;
    }
};

auto init = atexit([]() { ofstream("display_runtime.txt") << "0";});

------------------------------------------------
optimal (swaping)
class Solution {
public:
    void set(int ind, vector<int>& arr, vector<int>& ds, vector<vector<int>>& res){
        if(ind == arr.size()){
            res.push_back(arr);
            return;
        }
        for(int i=ind; i<arr.size(); i++){
            swap(arr[ind], arr[i]);
            set(ind+1, arr, ds, res);
            swap(arr[ind], arr[i]);
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> ds;

        set(0, nums,  ds, res);
        return res;
    }
};

auto init = atexit([]() { ofstream("display_runtime.txt") << "0";});

90. Subsets II: https://leetcode.com/problems/subsets-ii/

// nums: [1,2,2]
// o/p: [[],[1],[1,2],[1,2,2],[2],[2,2]]
------------------------------------------------
brute force:
class Solution {
public:
    void setter(int ind, vector<int>& arr, vector<int>& ds, set<vector<int>>& res){
        if(ind == arr.size()){
            res.insert(ds);
            return;
        }
        ds.push_back(arr[ind]);
        setter(ind+1, arr, ds, res);
        ds.pop_back();
        setter(ind+1, arr, ds, res);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        set<vector<int>> s;
        vector<int> ds;

        setter(0, nums,  ds, s);

        for(auto i:s) res.push_back(i);
        return res;
    }
};

auto init = atexit([]() { ofstream("display_runtime.txt") << "0";});
---------------------------------------------------
optimal:
class Solution {
public:
    void setter(int ind, vector<int>& arr, vector<int>& ds, vector<vector<int>>& res){
        res.push_back(ds);

        for(int i=ind; i<arr.size(); i++){
            if(i>ind && arr[i] == arr[i-1]) continue;
            ds.push_back(arr[i]);
            setter(i+1, arr, ds, res);
            ds.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        vector<int> ds;

        setter(0, nums,  ds, res);
        return res;
    }
};

auto init = atexit([]() { ofstream("display_runtime.txt") << "0";});
